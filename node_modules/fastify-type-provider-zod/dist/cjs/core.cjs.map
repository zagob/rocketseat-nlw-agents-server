{"version":3,"file":"core.cjs","sources":["../../src/core.ts"],"sourcesContent":["import type { SwaggerTransform, SwaggerTransformObject } from '@fastify/swagger'\nimport type {\n  FastifyPluginAsync,\n  FastifyPluginCallback,\n  FastifyPluginOptions,\n  FastifySchema,\n  FastifySchemaCompiler,\n  FastifyTypeProvider,\n  RawServerBase,\n  RawServerDefault,\n} from 'fastify'\nimport type { FastifySerializerCompiler } from 'fastify/types/schema'\nimport type { $ZodRegistry, input, output } from 'zod/v4/core'\nimport { $ZodType, globalRegistry, safeParse } from 'zod/v4/core'\n\nimport { createValidationError, InvalidSchemaError, ResponseSerializationError } from './errors'\nimport { zodRegistryToJson, zodSchemaToJson } from './zod-to-json'\n\ntype FreeformRecord = Record<string, any>\n\nconst defaultSkipList = [\n  '/documentation/',\n  '/documentation/initOAuth',\n  '/documentation/json',\n  '/documentation/uiConfig',\n  '/documentation/yaml',\n  '/documentation/*',\n  '/documentation/static/*',\n]\n\nexport interface ZodTypeProvider extends FastifyTypeProvider {\n  validator: this['schema'] extends $ZodType ? output<this['schema']> : unknown\n  serializer: this['schema'] extends $ZodType ? input<this['schema']> : unknown\n}\n\ninterface Schema extends FastifySchema {\n  hide?: boolean\n}\n\ntype CreateJsonSchemaTransformOptions = {\n  skipList?: readonly string[]\n  schemaRegistry?: $ZodRegistry<{ id?: string | undefined }>\n}\n\nexport const createJsonSchemaTransform = ({\n  skipList = defaultSkipList,\n  schemaRegistry = globalRegistry,\n}: CreateJsonSchemaTransformOptions): SwaggerTransform<Schema> => {\n  return ({ schema, url }) => {\n    if (!schema) {\n      return {\n        schema,\n        url,\n      }\n    }\n\n    const { response, headers, querystring, body, params, hide, ...rest } = schema\n\n    const transformed: FreeformRecord = {}\n\n    if (skipList.includes(url) || hide) {\n      transformed.hide = true\n      return { schema: transformed, url }\n    }\n\n    const zodSchemas: FreeformRecord = { headers, querystring, body, params }\n\n    for (const prop in zodSchemas) {\n      const zodSchema = zodSchemas[prop]\n      if (zodSchema) {\n        transformed[prop] = zodSchemaToJson(zodSchema, schemaRegistry, 'input')\n      }\n    }\n\n    if (response) {\n      transformed.response = {}\n\n      for (const prop in response as any) {\n        const zodSchema = resolveSchema((response as any)[prop])\n\n        transformed.response[prop] = zodSchemaToJson(zodSchema, schemaRegistry, 'output')\n      }\n    }\n\n    for (const prop in rest) {\n      const meta = rest[prop as keyof typeof rest]\n      if (meta) {\n        transformed[prop] = meta\n      }\n    }\n\n    return { schema: transformed, url }\n  }\n}\n\nexport const jsonSchemaTransform: SwaggerTransform<Schema> = createJsonSchemaTransform({})\n\ntype CreateJsonSchemaTransformObjectOptions = {\n  schemaRegistry?: $ZodRegistry<{ id?: string | undefined }>\n}\n\nexport const createJsonSchemaTransformObject =\n  ({\n    schemaRegistry = globalRegistry,\n  }: CreateJsonSchemaTransformObjectOptions): SwaggerTransformObject =>\n  (input) => {\n    if ('swaggerObject' in input) {\n      console.warn('This package currently does not support component references for Swagger 2.0')\n      return input.swaggerObject\n    }\n\n    const inputSchemas = zodRegistryToJson(schemaRegistry, 'input')\n    const outputSchemas = zodRegistryToJson(schemaRegistry, 'output')\n\n    for (const key in outputSchemas) {\n      if (inputSchemas[key]) {\n        throw new Error(\n          `Collision detected for schema \"${key}\". The is already an input schema with the same name.`,\n        )\n      }\n    }\n\n    return {\n      ...input.openapiObject,\n      components: {\n        ...input.openapiObject.components,\n        schemas: {\n          ...input.openapiObject.components?.schemas,\n          ...inputSchemas,\n          ...outputSchemas,\n        },\n      },\n    } as ReturnType<SwaggerTransformObject>\n  }\n\nexport const jsonSchemaTransformObject: SwaggerTransformObject = createJsonSchemaTransformObject({})\n\nexport const validatorCompiler: FastifySchemaCompiler<$ZodType> =\n  ({ schema }) =>\n  (data) => {\n    const result = safeParse(schema, data)\n    if (result.error) {\n      return { error: createValidationError(result.error) as unknown as Error }\n    }\n\n    return { value: result.data }\n  }\n\nfunction resolveSchema(maybeSchema: $ZodType | { properties: $ZodType }): $ZodType {\n  if (maybeSchema instanceof $ZodType) {\n    return maybeSchema\n  }\n  if ('properties' in maybeSchema && maybeSchema.properties instanceof $ZodType) {\n    return maybeSchema.properties\n  }\n  throw new InvalidSchemaError(JSON.stringify(maybeSchema))\n}\n\ntype ReplacerFunction = (this: any, key: string, value: any) => any\n\nexport type ZodSerializerCompilerOptions = {\n  replacer?: ReplacerFunction\n}\n\nexport const createSerializerCompiler =\n  (\n    options?: ZodSerializerCompilerOptions,\n  ): FastifySerializerCompiler<$ZodType | { properties: $ZodType }> =>\n  ({ schema: maybeSchema, method, url }) =>\n  (data) => {\n    const schema = resolveSchema(maybeSchema)\n\n    const result = safeParse(schema, data)\n    if (result.error) {\n      throw new ResponseSerializationError(method, url, { cause: result.error })\n    }\n\n    return JSON.stringify(result.data, options?.replacer)\n  }\n\nexport const serializerCompiler: ReturnType<typeof createSerializerCompiler> =\n  createSerializerCompiler({})\n\n/**\n * FastifyPluginCallbackZod with Zod automatic type inference\n *\n * @example\n * ```typescript\n * import { FastifyPluginCallbackZod } from \"fastify-type-provider-zod\"\n *\n * const plugin: FastifyPluginCallbackZod = (fastify, options, done) => {\n *   done()\n * }\n * ```\n */\nexport type FastifyPluginCallbackZod<\n  Options extends FastifyPluginOptions = Record<never, never>,\n  Server extends RawServerBase = RawServerDefault,\n> = FastifyPluginCallback<Options, Server, ZodTypeProvider>\n\n/**\n * FastifyPluginAsyncZod with Zod automatic type inference\n *\n * @example\n * ```typescript\n * import { FastifyPluginAsyncZod } from \"fastify-type-provider-zod\"\n *\n * const plugin: FastifyPluginAsyncZod = async (fastify, options) => {\n * }\n * ```\n */\nexport type FastifyPluginAsyncZod<\n  Options extends FastifyPluginOptions = Record<never, never>,\n  Server extends RawServerBase = RawServerDefault,\n> = FastifyPluginAsync<Options, Server, ZodTypeProvider>\n"],"names":["globalRegistry","zodSchemaToJson","zodRegistryToJson","safeParse","createValidationError","$ZodType","InvalidSchemaError","ResponseSerializationError"],"mappings":"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"}